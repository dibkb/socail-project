// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mongodb"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}

model User {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  username     String   @unique
  email        String   @unique
  password     String
  profilePic   String?  @default("")
  bio          String?  @default("")
  isFrozen     Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  followingIds String[] @db.ObjectId
  followerIds  String[] @db.ObjectId

  posts         Post[]
  comments      Comment[]
  notifications Notification[]
}

model Notification {
  userId    String           @db.ObjectId
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  type      NotificationType
  creatorId String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Post {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  threadId  String?  @db.ObjectId
  likedIds  String[] @db.ObjectId
  image     String?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  threads Thread? @relation(fields: [threadId], references: [id], onDelete: Cascade)

  comments Comment[]
}

model Thread {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts Post[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
